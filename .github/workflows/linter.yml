on:
  # Trigger the workflow on push or pull request,
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

name: clippy & fmt & build & test

env:
  RUST_FMT: nightly-2023-04-01
  RUST_VERSION: "1.73"
  CARGO_CONCORDIUM_VERSION: "3.0.0"

jobs:
  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crates:
          - registry/Cargo.toml
          - staking-bank/Cargo.toml
          - umbrella-feeds/Cargo.toml
          - dummy-contract/Cargo.toml
          - oracle-integration/Cargo.toml

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain with rustfmt available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_FMT }}
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=${{ matrix.crates }} -- --check

  clippy-schema:
    name: Clippy on contracts with schema
    runs-on: ubuntu-latest
    needs: rustfmt
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown

        crates:
          - registry/Cargo.toml
          - staking-bank/Cargo.toml
          - umbrella-feeds/Cargo.toml
          - dummy-contract/Cargo.toml
          - oracle-integration/Cargo.toml

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install toolchain with clippy available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}
          override: true
          components: clippy

      - name: Run cargo clippy with schema and tests
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path ${{ matrix.crates }} --target=${{ matrix.target }} --features concordium-std/build-schema --features concordium-std/wasm-test -- -D warnings

  check-no-std-build:
    name: Build on nightly,
    runs-on: ubuntu-latest
    needs: rustfmt
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown

        crates:
          - registry/Cargo.toml
          - staking-bank/Cargo.toml --features production
          - staking-bank/Cargo.toml --features development
          - staking-bank/Cargo.toml --features sandbox
          - staking-bank/Cargo.toml --features local
          - umbrella-feeds/Cargo.toml
          - dummy-contract/Cargo.toml
          - oracle-integration/Cargo.toml --features production
          - oracle-integration/Cargo.toml --features development
          - oracle-integration/Cargo.toml --features local

        features:
          -
          - concordium-std/build-schema

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain with check available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo check with no-std
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path ${{ matrix.crates }} --target=${{ matrix.target }} --no-default-features --features=${{ matrix.features }} --features wee_alloc

  check-build:
    name: Check build contracts
    runs-on: ubuntu-latest
    needs: [rustfmt, clippy-schema]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - wasm32-unknown-unknown

        crates:
          - registry/Cargo.toml
          - staking-bank/Cargo.toml --features production
          - staking-bank/Cargo.toml --features development
          - staking-bank/Cargo.toml --features sandbox
          - staking-bank/Cargo.toml --features local
          - umbrella-feeds/Cargo.toml
          - dummy-contract/Cargo.toml
          - oracle-integration/Cargo.toml --features production
          - oracle-integration/Cargo.toml --features development
          - oracle-integration/Cargo.toml --features local

        features:
          -
          - concordium-std/build-schema

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path ${{ matrix.crates }} --target=${{ matrix.target }} --features=${{ matrix.features }}

  build-local-and-test:
    name: Build contracts and test contracts
    runs-on: ubuntu-latest
    needs: [rustfmt, clippy-schema]

    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}
          override: true
          
      - name: Install Wasm target
        run: rustup target install wasm32-unknown-unknown

      - name: Download and install Cargo Concordium
        run: |
          CARGO_CCD=cargo-concordium_${{ env.CARGO_CONCORDIUM_VERSION }}
          wget https://distribution.concordium.software/tools/linux/$CARGO_CCD
          chmod +x $CARGO_CCD
          sudo mv $CARGO_CCD /usr/bin/cargo-concordium

      - name: Run cargo build registry
        run: cargo concordium build --out "./registry/registry.wasm.v1" -- --manifest-path "registry/Cargo.toml" --locked

      - name: Run cargo build staking_bank
        run: cargo concordium build --out "./staking-bank/staking_bank.wasm.v1" -- --manifest-path "staking-bank/Cargo.toml" --features local --locked

      - name: Run cargo build umbrella_feeds
        run: cargo concordium build --out "./umbrella-feeds/umbrella_feeds.wasm.v1" -- --manifest-path "umbrella-feeds/Cargo.toml" --locked

      - name: Run cargo build oracle_integration
        run: cargo concordium build --out "./oracle-integration/oracle_integration.wasm.v1" -- --manifest-path "oracle-integration/Cargo.toml" --features local --locked
     
      - name: Run cargo build dummy_contract
        run: cargo concordium build --out "./dummy-contract/dummy_contract.wasm.v1" -- --manifest-path "dummy-contract/Cargo.toml" --locked

      - name: Run cargo test registry
        run: cargo concordium test -- --manifest-path "registry/Cargo.toml" --locked

      - name: Run cargo test staking-bank
        run: cargo concordium test -- --manifest-path "staking-bank/Cargo.toml" --locked

      - name: Run cargo test oracle-integration
        run: cargo concordium test -- --manifest-path "oracle-integration/Cargo.toml" --locked

      - name: Run cargo test umbrella-feeds
        run: cargo concordium test -- --manifest-path "umbrella-feeds/Cargo.toml" --locked

      - name: Run cargo test dummy-contract
        run: cargo concordium test -- --manifest-path "dummy-contract/Cargo.toml" --locked
